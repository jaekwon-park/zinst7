#!/bin/bash
#!/ <-- This simbole will be remove with same-line via build.sh. this is just for TDD
## Parsing!!!   importatant area
source ./Parser_engine		#!/ for All command Parsing

Daemon_check_dir="$ZinstBaseRoot/vault/Source"

##### Test variables Area ##### #!/
## Need some parameters from command-line  as below #!/ for test
## Daemon_Control restart httpd  #!/ for test
source OS_Checker #!/ for test with OS check
source System_Controller_checker #!/ for test with system command check
Daemon_check_dir="/tmp" 	#!/ for tmp store of Daemon check
History_LOG="/tmp/history_tmp"	#!/ for history tmp file
OS_name=`cat /tmp/chked_os.txt`	#!/ for user insert test

ProcessPkg=($ZPackages)
ProcessPkgNum=${#ProcessPkg[@]}

Counter=0
Command_p="# Daemon $CommandX"
echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - ${ProcessPkg[@]}  " >> $History_LOG
ColorGreen="32"
ColorRed="31"
ColorDark="30"
	while [[ $Counter -lt $ProcessPkgNum ]]
	do
		DaemonC=`echo "${ProcessPkg[$Counter]}"`
			## Custom package check
			if [[ -f "/etc/init.d/$DaemonC" ]];then
				system_command=custome_ctl
			fi

			case $system_command in
				systemctl)
					systemCMD="systemctl $CommandX $DaemonC.service";;
				service)
					systemCMD="service $DaemonC $CommandX";;
				custome_ctl)
					systemCMD="/etc/init.d/$DaemonC $CommandX";;
				*)
					echo " --- We are not support on this OS ---" 
					exit 0;;
			esac
		export LANG=C
			if [[ $CommandX = "run" ]];then
				#$sudo_base $ServiceDaemonDir/$DaemonC $CommandX
				$sudo_base $systemCMD
				echo "$sudo_base $systemCMD ---" #!/ for test
			else
				#$sudo_base service $DaemonC $CommandX | tee $Daemon_check_dir/Daemon_ctrl.log
				$sudo_base $systemCMD &> $Daemon_check_dir/Daemon_ctrl.log
				echo "$sudo_base $systemCMD &> $Daemon_check_dir/Daemon_ctrl.log ---" #!/ for test
				$sudo_base chmod 664 $Daemon_check_dir/Daemon_ctrl.log
				$sudo_base chgrp wheel $Daemon_check_dir/Daemon_ctrl.log
				$sudo_base cat $Daemon_check_dir/Daemon_ctrl.log
			fi
		DaemLog=`$sudo_base cat $Daemon_check_dir/Daemon_ctrl.log |tail -1`
		Daemon_S=$DaemLog
			FailCheck=`echo $DaemLog | grep "FAILED"`
			if [[ $FailCheck != "" ]];then
				Daemon_S=`printf "[\033[%dm%s\033[0m]\n" $ColorRed "FAILED"`
			fi
			SuccCheck=`echo $DaemLog | grep "OK"`
			if [[ $SuccCheck != "" ]];then
				Daemon_S=`printf "[\033[%dm%s\033[0m]\n" $ColorGreen " OK "`
			fi
			NorCheck=`echo $DaemLog | grep -v "OK|FAILED"`
			if [[ $NorCheck != "" ]];then
				:
			fi
			DaemLog=$Daemon_S
		## Replaced by tee              $sudo_base cat $Daemon_check_dir/Daemon_ctrl.log 2> /dev/null

		## Checking the daemon
		sleep 1
		Status_D=`echo $DaemonC | sed -e 's/d$//g'`
		DaemonPSChk=`ps aux |grep "$Status_D" | egrep -v " grep" | egrep -v "zinst " |egrep -v " vi"`
			if [[ $DaemonPSChk != "" ]];then
				TextColor=$ColorGreen
				Daemon_Status="Working"
				## Daemon check result output
				DaemonResult=`printf "\033[%dm%s\033[0m\n" $TextColor "$Daemon_Status";`
				Command_Result=`echo "Daemon $DaemonResult: $DaemLog "`
			else
				TextColor=$ColorDark
				Daemon_Status="Not working"
				## Daemon check result output
				DaemonResult=`printf "\033[%dm%s\033[0m\n" $TextColor "$Daemon_Status";`
				Command_Result=`echo "Daemon $DaemonResult: $DaemLog"`
				#Command_Result=`echo "$DaemLog"`
			fi

		DaemonCheck=`echo $DaemLog | grep "unrecognized"`
			if [[ $DaemonCheck != "" ]]
			then
				echo "$DaemonC is unrecognized service"
				exit 0;
			fi
		echo -e "\t\t\t $WhoStamps : #     - $Command_Result " >> $History_LOG
		let Counter=Counter+1
        $sudo_base rm -f $Daemon_check_dir/Daemon_ctrl.log
	done
